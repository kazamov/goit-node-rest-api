name: Gating Checks
description: |
    This workflow runs on pull requests to the main branch and performs various checks including type checking, linting, building, and running tests. It also sets up a PostgreSQL database and MailHog for email testing.
    It uploads test results as artifacts for review.

permissions:
    contents: read
    pull-requests: write

on:
    pull_request:
        branches: [main]

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        timeout-minutes: 15
        env:
            NODE_ENV: test

        services:
            postgres:
                image: postgres:16-alpine
                env:
                    POSTGRES_USER: ${{ secrets.DB_USERNAME }}
                    POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
                    POSTGRES_DB: ${{ secrets.DB_NAME }}
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd "pg_isready -U $DB_USERNAME -d $DB_NAME"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
            mailhog:
                image: mailhog/mailhog
                ports:
                    - 1025:1025 # SMTP server
                    - 8025:8025 # Web UI for debugging (optional)

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22.14.0'

            - name: Install dependencies
              run: npm ci

            - name: Type check
              run: npm run type-check

            - name: Format check
              run: npm run format:check

            - name: Lint
              run: npm run lint

            - name: Build
              run: npm run build

            - name: Tests
              run: npm run test

            - name: E2E Tests
              run: npm run e2e
              env:
                  # Set the environment variables for the database connection
                  DB_USERNAME: ${{ secrets.DB_USERNAME }}
                  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                  DB_NAME: ${{ secrets.DB_NAME }}
                  DB_HOST: ${{ secrets.DB_HOST }}
                  DB_PORT: ${{ secrets.DB_PORT }}
                  DB_ENABLE_SSL: ${{ secrets.DB_ENABLE_SSL }}
                  JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
                  PORT: ${{ secrets.PORT }}
                  API_DOMAIN: ${{ secrets.API_DOMAIN }}
                  SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
                  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
                  SMTP_HOST: ${{ secrets.SMTP_HOST }}
                  SMTP_PORT: ${{ secrets.SMTP_PORT }}
                  SMTP_SECURE: ${{ secrets.SMTP_SECURE }}

            - name: Upload test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-${{ github.run_id }}
                  path: |
                      playwright-report/
                  retention-days: 14
